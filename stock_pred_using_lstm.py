# -*- coding: utf-8 -*-
"""Welcome To Colab

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/notebooks/intro.ipynb
"""

import pandas as pd
import numpy as np
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense
import matplotlib.pyplot as plt

# Load the Netflix stock data from Kaggle (assuming it's a CSV file)
df = pd.read_csv('/content/nflx_2014_2023.csv', index_col='date', parse_dates=True)

# Select the 'Close' price as the target variable
data = df[['close']]

# Scale the data to the range [0, 1]
scaler = MinMaxScaler(feature_range=(0, 1))
data['close'] = scaler.fit_transform(np.array(data['close']).reshape(-1, 1))

# Split data into training and testing sets (e.g., 80% train, 20% test)
training_size = int(len(data) * 0.8)
test_size = len(data) - training_size
train_data, test_data = data[0:training_size], data[training_size:len(data)]

def create_dataset(dataset, look_back=100):  # Adjust 'look_back' as needed
    X, Y = [], []
    for i in range(len(dataset) - look_back - 1):
        a = dataset.iloc[i:(i + look_back), 0]
        X.append(a)
        Y.append(dataset.iloc[i + look_back, 0])
    return np.array(X), np.array(Y)

look_back = 100  # Number of previous days' data to use for prediction
X_train, Y_train = create_dataset(train_data, look_back)
X_test, Y_test = create_dataset(test_data, look_back)

# Reshape input to be [samples, time steps, features]
X_train = X_train.reshape(X_train.shape[0], X_train.shape[1], 1)
X_test = X_test.reshape(X_test.shape[0], X_test.shape[1], 1)



model = Sequential()
model.add(LSTM(units=50, return_sequences=True, input_shape=(X_train.shape[1], 1)))
model.add(LSTM(units=50))
model.add(Dense(1))

model.compile(loss='mean_squared_error', optimizer='adam')
model.fit(X_train, Y_train, epochs=100, batch_size=64, verbose=1)
# Adjust epochs and batch_size as needed

train_predict = model.predict(X_train)
test_predict = model.predict(X_test)

# Invert predictions to original scale
train_predict = scaler.inverse_transform(train_predict)
Y_train = scaler.inverse_transform([Y_train])
test_predict = scaler.inverse_transform(test_predict)
Y_test = scaler.inverse_transform([Y_test])

# Calculate RMSE for evaluation
import math
from sklearn.metrics import mean_squared_error
rmse_train = math.sqrt(mean_squared_error(Y_train[0], train_predict[:, 0]))
rmse_test = math.sqrt(mean_squared_error(Y_test[0], test_predict[:, 0]))
print('RMSE Train:', rmse_train)
print('RMSE Test:', rmse_test)

# Plot the actual vs. predicted prices
plt.figure(figsize=(12, 6))

# Shift train predictions for plotting
look_back = 100  # Same as your look_back value
trainPredictPlot = np.empty_like(data)
trainPredictPlot[:, :] = np.nan
trainPredictPlot[look_back:len(train_predict) + look_back, :] = train_predict

# Shift test predictions for plotting
testPredictPlot = np.empty_like(data)
testPredictPlot[:, :] = np.nan
testPredictPlot[len(train_predict) + (look_back * 2) + 1:len(data) - 1, :] = test_predict

# Plot baseline and predictions
plt.plot(scaler.inverse_transform(data), label='Actual')
plt.plot(trainPredictPlot, label='Train Prediction')
plt.plot(testPredictPlot, label='Test Prediction')

plt.title('Netflix Stock Price Prediction')
plt.xlabel('Time')
plt.ylabel('Stock Price')
plt.legend()
plt.show()

